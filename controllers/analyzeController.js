const fs = require("fs");
const path = require("path");
const { exec, spawn } = require("child_process");
const admin = require("../firebase");
const db = admin.firestore();
const { calculateDetailedScores } = require("../utils/scoreCalculator");
const { generateImprovementSummary } = require("../utils/gptService");

async function getOrCreateFolder(device_uuid, script_id, title) {
  // 1. ÎèôÏùºÌïú device_uuid + script_id Ï°∞Ìï©Ïù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
  const folderRef = db.collection("folders")
    .where("device_uuid", "==", device_uuid)
    .where("script_id", "==", script_id)
    .limit(1);

  const snapshot = await folderRef.get();
  if (!snapshot.empty) {
    return snapshot.docs[0].id;
  }

  // 2. ÎèôÏùºÌïú device_uuid ÎÇ¥ÏóêÏÑú title Ï§ëÎ≥µ ÌôïÏù∏ + ÏûêÎèô Ïà´Ïûê Î∂ôÏù¥Í∏∞
  const baseTitle = title.trim();
  let finalTitle = baseTitle;
  let index = 1;

  const allFolderSnapshot = await db.collection("folders")
    .where("device_uuid", "==", device_uuid)
    .get();

  const existingTitles = allFolderSnapshot.docs.map(doc => doc.data().title);

  while (existingTitles.includes(finalTitle)) {
    index += 1;
    finalTitle = `${baseTitle}_${index}`;
  }

  // 3. Ìè¥Îçî ÏÉùÏÑ±
  const newFolderId = `folder-${Date.now()}`;
  await db.collection("folders").doc(newFolderId).set({
    folder_id: newFolderId,
    device_uuid,
    script_id,
    title: finalTitle,
    created_at: admin.firestore.FieldValue.serverTimestamp()
  });

  return newFolderId;
}



function calculateMatchRate(scriptText, userText) {
  const normalize = text => text.replace(/[\W_]+/g, " ").toLowerCase().trim();
  const scriptWords = normalize(scriptText).split(/\s+/);
  const userWords = normalize(userText).split(/\s+/);
  const scriptSet = new Set(scriptWords);
  const userSet = new Set(userWords);
  const matches = [...scriptSet].filter(word => userSet.has(word));
  return Math.round((matches.length / scriptSet.size) * 100);
}


function generateTips(scores) {
  const { match_score, eye_score, speed_score, filler_score, pitch_score } = scores;
  const tips = [];
  if (match_score < 20) tips.push("Ïä§ÌÅ¨Î¶ΩÌä∏ ÏùºÏπòÏú®Ïù¥ ÎÇÆÏäµÎãàÎã§. Ïä§ÌÅ¨Î¶ΩÌä∏ ÎÇ¥Ïö©ÏùÑ Ï∂©Î∂ÑÌûà ÏàôÏßÄÌïòÍ≥† Ïó∞ÏäµÌï¥Î≥¥ÏÑ∏Ïöî.");
  if (eye_score < 15) tips.push("Ï≤≠Ï§ë(Ïπ¥Î©îÎùº)ÏùÑ Îçî ÏûêÏ£º Î∞îÎùºÎ≥¥Îäî Ïó∞ÏäµÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.");
  if (speed_score < 10) tips.push("Î∞úÌëú ÏÜçÎèÑÎ•º Ï°∞Í∏à Ï°∞Ï†àÌïòÏó¨ ÎÑàÎ¨¥ Îπ†Î•¥Í±∞ÎÇò ÎäêÎ¶¨ÏßÄ ÏïäÍ≤å Ìï¥Î≥¥ÏÑ∏Ïöî.");
  if (filler_score < 10) tips.push("Î∞úÌëú Ï§ë Î∂àÌïÑÏöîÌïú ÎßêÎ≤ÑÎ¶á(Ïùå, Ïñ¥..)ÏùÑ Ï§ÑÏù¥Î©¥ ÎçîÏö± ÏûêÏó∞Ïä§ÎüΩÍ≤å Îì§Î¶ΩÎãàÎã§.");
  if (pitch_score < 10) tips.push("Î™©ÏÜåÎ¶¨ ÎÜíÎÇÆÏù¥Î•º Ï°∞Ï†àÌïòÏó¨ Îì£Í∏∞ Ìé∏Ìïú Î∞úÌëúÎ•º ÎßåÎì§Ïñ¥Î≥¥ÏÑ∏Ïöî.");
  if (tips.length === 0) tips.push("Î∞úÌëú Ï†ÑÎ∞òÏù¥ Îß§Ïö∞ ÏïàÏ†ïÏ†ÅÏûÖÎãàÎã§! ÌõåÎ•≠ÌïòÍ≤å ÏßÑÌñâÌïòÏÖ®ÏäµÎãàÎã§.");
  return tips;
}

// async function tryWhisperAndParse(wavPath) {
//   return new Promise((resolve, reject) => {
//     exec(`python3 transcribe.py "${path.resolve(wavPath)}"`, (err, stdout, stderr) => {
//       if (err || stderr) {
//         return reject(new Error(`Whisper error: ${err || stderr}`));
//       }
//       try {
//         const parsed = JSON.parse(stdout);
//         resolve(parsed);
//       } catch (parseErr) {
//         reject(new Error(`JSON parse error: ${parseErr.message}`));
//       }
//     });
//   });
// }

async function tryWhisperAndParse(wavPath) {
  return new Promise((resolve, reject) => {
    exec(`python3 transcribe.py "${path.resolve(wavPath)}"`, (err, stdout, stderr) => {
      // stderrÎäî Î°úÍ∑∏Ïù¥ÎØÄÎ°ú Î¨¥ÏãúÌïòÍ≥† errÎßå Ïã§Ìå® Ï°∞Í±¥ÏúºÎ°ú ÌôïÏù∏
      if (err) {
        console.error("[Whisper Error] Python process failed:", err.message);
        return reject(new Error(`Whisper execution failed: ${err.message}`));
      }

      if (stderr) {
        console.warn("[Whisper Warning] Python stderr output:\n", stderr);
        // Í≤ΩÍ≥† Ï∂úÎ†•ÏùÄ Î°úÍπÖÎßå, Ïã§Ìå®Î°ú Í∞ÑÏ£ºÌïòÏßÄ ÏïäÏùå
      }

      try {
        const parsed = JSON.parse(stdout);
        resolve(parsed);
      } catch (parseErr) {
        console.error("‚ùå JSON ÌååÏã± Ïã§Ìå®:", stdout);
        return reject(new Error(`JSON parse error: ${parseErr.message}`));
      }
    });
  });
}


exports.analyzeSpeech = async (req, res) => {
  console.log("üìé multer ÏóÖÎ°úÎìú Í≤∞Í≥º:", req.file);
  const pcmPath = req.file?.path;

  if (!pcmPath || !fs.existsSync(pcmPath)) {
    console.error("‚ùå PCM ÌååÏùºÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÍ±∞ÎÇò Í≤ΩÎ°úÍ∞Ä ÏûòÎ™ªÎê®:", pcmPath);
    return res.status(400).send("PCM ÌååÏùºÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§.");
  }

  const wavPath = `${pcmPath}-converted.wav`;
  const ffmpeg = spawn("ffmpeg", [
    "-y", "-f", "s16le", "-ar", "16000", "-ac", "1",
    "-i", pcmPath,
    "-af", "volume=5dB",
    wavPath
  ]);

  let ffmpegError = "";
  ffmpeg.stderr.on("data", data => {
    ffmpegError += data.toString();
  });

  ffmpeg.on("close", async (code) => {
    if (code !== 0 || !fs.existsSync(wavPath)) {
      console.error("‚ùå FFmpeg Î≥ÄÌôò Ïã§Ìå®:", ffmpegError);
      fs.unlinkSync(pcmPath);
      return res.status(500).send("WAV ÌååÏùº ÏÉùÏÑ± Ïã§Ìå®");
    }

    try {
      const whisperResult = await tryWhisperAndParse(wavPath);
      const { transcription, speed_wpm, filler_word_count, pitch_std, speech_duration } = whisperResult;
      const { device_uuid, script_id, eye_contact_rate } = req.body;

      const scriptDoc = await db.collection("scripts").doc(script_id).get();
      if (!scriptDoc.exists) return res.status(404).send("Ìï¥Îãπ Ïä§ÌÅ¨Î¶ΩÌä∏Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.");

      const scriptText = scriptDoc.data().content;
      const scriptTitle = scriptDoc.data().title || "Ïä§ÌÅ¨Î¶ΩÌä∏";
      const match_rate = calculateMatchRate(scriptText, transcription);

      const sessionId = `sess-${Date.now()}`;
      const feedbackId = `feed-${Date.now()}`;
      const created_at = admin.firestore.FieldValue.serverTimestamp();
      const folder_id = await getOrCreateFolder(device_uuid, script_id, scriptTitle);

      const feedbackSnapshot = await db.collection("feedback")
        .where("folder_id", "==", folder_id).get();

      const scriptTitleClean = scriptTitle.trim();
      const regex = new RegExp(`^${scriptTitleClean.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}_([0-9]+)$`);
      let nextIndex = 1;

      feedbackSnapshot.forEach(doc => {
        const match = doc.data().title?.match(regex);
        if (match) {
          const num = parseInt(match[1]);
          if (num >= nextIndex) nextIndex = num + 1;
        }
      });

      const feedbackTitle = `${scriptTitleClean}_${nextIndex}`;

      const scores = calculateDetailedScores(
        Number(match_rate),
        Number(eye_contact_rate),
        Number(speed_wpm),
        Number(filler_word_count),
        Number(pitch_std)
      );

      const tipsArray = generateTips(scores);
      const { summary, improvement_tips } = await generateImprovementSummary({
        totalScore: scores.total_score,
        scores: {
          match_score: scores.match_score,
          eye_score: scores.eye_score,
          speed_score: scores.speed_score,
          filler_score: scores.filler_score,
          pitch_score: scores.pitch_score
        },
        tips: tipsArray
      });

      // DB Ï†ÄÏû•
      await db.collection("practice_sessions").doc(sessionId).set({
        session_id: sessionId,
        device_uuid,
        script_id,
        folder_id,
        transcription,
        pitch_data: { std: Number(pitch_std) },
        eye_contact_rate: Number(eye_contact_rate),
        filler_word_count: Number(filler_word_count),
        speed_wpm: Number(speed_wpm),
        speech_duration: Number(speech_duration),
        created_at
      });

      await db.collection("feedback").doc(feedbackId).set({
        feedback_id: feedbackId,
        session_id: sessionId,
        folder_id,
        title: feedbackTitle,
        summary,
        improvement_tips: [improvement_tips],
        script_match_rate: match_rate,
        speed_relative: Number(speed_wpm) - 140,
        total_score: scores.total_score,
        match_score: scores.match_score,
        eye_score: scores.eye_score,
        speed_score: scores.speed_score,
        filler_score: scores.filler_score,
        pitch_score: scores.pitch_score,
        pitch_std: Number(pitch_std),
        filler_word_count: Number(filler_word_count),
        speed_wpm: Number(speed_wpm),
        eye_contact_rate: Math.round(Number(eye_contact_rate) * 100),
        created_at
      });

      fs.unlinkSync(pcmPath);
      fs.unlinkSync(wavPath);

      res.json({
        success: true,
        session_id: sessionId,
        feedback_id: feedbackId,
        feedback: {
          raw_metrics: {
            script_match_rate: match_rate,
            eye_contact_rate: Math.round(Number(eye_contact_rate) * 100),
            speed_wpm: Number(speed_wpm),
            filler_word_count: Number(filler_word_count),
            pitch_std: Number(pitch_std)
          },
          scores: {
            script_score: scores.match_score,
            eye_score: scores.eye_score,
            speed_score: scores.speed_score,
            filler_score: scores.filler_score,
            pitch_score: scores.pitch_score,
            total_score: scores.total_score
          },
          summary,
          improvement_tips: [improvement_tips]
        }
      });

    } catch (err) {
      console.error("‚ùå Î∂ÑÏÑù ÎòêÎäî DB Ï†ÄÏû• Ï§ë Ïò§Î•ò:", err.message);
      fs.unlinkSync(pcmPath);
      if (fs.existsSync(wavPath)) fs.unlinkSync(wavPath);
      res.status(500).send(err.message);
    }
  });
};

